// original IT0051 by thejam79
// add YV12 mode by minamina 2003/05/01
//
// Borrowed from the author of IT.dll, whose name I
// could not determine. Modified for YV12 by Donald Graft.
// RGB32 Added by Klaus Post
// Converted to generic planar, and now using exact coordinates - NOT character coordinates by Klaus Post
// Refactor, DrawString...() is the primative, Oct 2010 Ian Brabham
// TO DO: Clean up - and move functions to a .c file.

// pinterf:
// high bit depth, planar RGB
// utf8 option, internally unicode, Latin-1 Supplement 00A0-00FF
// Original hexadecimal bitmap definitions changed to binary literals
// Add some new characters from Latin Extended A
// Configurable color
// Configurable halocolor (text outline)
// Configurable background fading
// Alignment
// multiline

#include "info.h"
#include <cstring>
#include <sstream>
//#include "internal.h"
//#include <map>
#include <unordered_map>
#include <array>

// font table definition WxH = 10x20 pixels
// Character is defined at the MSB 10 bits.
// Converted from the wellknown "info.h", with charcode mapping and additions
static const fixedFontArray font_10_20 = {
  { 0x0020,  // U+0020 (32 dec): " "
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0021,  // U+0021 (33 dec): "!"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0022,  // U+0022 (34 dec): """
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001001000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0023,  // U+0023 (35 dec): "#"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110110'000000,
    0b0000110110'000000,
    0b0000110110'000000,
    0b0011111111'000000,
    0b0001101100'000000,
    0b0001101100'000000,
    0b0001101100'000000,
    0b0111111110'000000,
    0b0011011000'000000,
    0b0011011000'000000,
    0b0011011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0024,  // U+0024 (36 dec): "$"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0110110110'000000,
    0b0110110000'000000,
    0b0110110000'000000,
    0b0110110000'000000,
    0b0011111100'000000,
    0b0000110110'000000,
    0b0000110110'000000,
    0b0000110110'000000,
    0b0110110110'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0025,  // U+0025 (37 dec): "%"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011100110'000000,
    0b0110110110'000000,
    0b0110111100'000000,
    0b0011101100'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001101110'000000,
    0b0001111011'000000,
    0b0011011011'000000,
    0b0011001110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0026,  // U+0026 (38 dec): "&"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110000'000000,
    0b0011011000'000000,
    0b0011011000'000000,
    0b0011011000'000000,
    0b0011110000'000000,
    0b0001100000'000000,
    0b0011100000'000000,
    0b0110110000'000000,
    0b0110011011'000000,
    0b0110001110'000000,
    0b0110001100'000000,
    0b0111011110'000000,
    0b0011110011'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0027,  // U+0027 (39 dec): "'"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111100'000000,
    0b0000111000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0028,  // U+0028 (40 dec): "("
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000011000'000000,
    0b0000001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0029,  // U+0029 (41 dec): ")"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002A,  // U+002A (42 dec): "*"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0111111110'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002B,  // U+002B (43 dec): "+"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002C,  // U+002C (44 dec): ","
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002D,  // U+002D (45 dec): "-"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002E,  // U+002E (46 dec): "."
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x002F,  // U+002F (47 dec): "/"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0030,  // U+0030 (48 dec): "0"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0031,  // U+0031 (49 dec): "1"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001110000'000000,
    0b0011110000'000000,
    0b0110110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0032,  // U+0032 (50 dec): "2"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000111000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0033,  // U+0033 (51 dec): "3"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000111000'000000,
    0b0000001100'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0034,  // U+0034 (52 dec): "4"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000100'000000,
    0b0000001100'000000,
    0b0000011100'000000,
    0b0000111100'000000,
    0b0001101100'000000,
    0b0011001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0111111110'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0035,  // U+0035 (53 dec): "5"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0036,  // U+0036 (54 dec): "6"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000100'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0037,  // U+0037 (55 dec): "7"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0038,  // U+0038 (56 dec): "8"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0039,  // U+0039 (57 dec): "9"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0010000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003A,  // U+003A (58 dec): ":"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003B,  // U+003B (59 dec): ";"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0001110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003C,  // U+003C (60 dec): "<"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000100'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0110000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000011000'000000,
    0b0000001100'000000,
    0b0000000100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003D,  // U+003D (61 dec): "="
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003E,  // U+003E (62 dec): ">"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0010000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000011000'000000,
    0b0000001100'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0010000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x003F,  // U+003F (63 dec): "?"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0040,  // U+0040 (64 dec): "@"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110011110'000000,
    0b0110111110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110111100'000000,
    0b0110011000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0041,  // U+0041 (65 dec): "A"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0042,  // U+0042 (66 dec): "B"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111110000'000000,
    0b0110011000'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110011000'000000,
    0b0111111000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0111111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0043,  // U+0043 (67 dec): "C"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0044,  // U+0044 (68 dec): "D"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0111111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0045,  // U+0045 (69 dec): "E"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0046,  // U+0046 (70 dec): "F"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0047,  // U+0047 (71 dec): "G"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110011110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0048,  // U+0048 (72 dec): "H"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0049,  // U+0049 (73 dec): "I"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004A,  // U+004A (74 dec): "J"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004B,  // U+004B (75 dec): "K"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0111110000'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004C,  // U+004C (76 dec): "L"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004D,  // U+004D (77 dec): "M"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111001110'000000,
    0b0111001110'000000,
    0b0111111110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004E,  // U+004E (78 dec): "N"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0111000110'000000,
    0b0111000110'000000,
    0b0111100110'000000,
    0b0111100110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110011110'000000,
    0b0110011110'000000,
    0b0110001110'000000,
    0b0110001110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x004F,  // U+004F (79 dec): "O"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0050,  // U+0050 (80 dec): "P"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0051,  // U+0051 (81 dec): "Q"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110110110'000000,
    0b0110011110'000000,
    0b0011001100'000000,
    0b0001111100'000000,
    0b0000000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0052,  // U+0052 (82 dec): "R"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0111111000'000000,
    0b0110011000'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0053,  // U+0053 (83 dec): "S"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000000'000000,
    0b0001111000'000000,
    0b0000001100'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0054,  // U+0054 (84 dec): "T"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0055,  // U+0055 (85 dec): "U"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0056,  // U+0056 (86 dec): "V"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0057,  // U+0057 (87 dec): "W"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0111001110'000000,
    0b0111001110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0058,  // U+0058 (88 dec): "X"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0059,  // U+0059 (89 dec): "Y"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005A,  // U+005A (90 dec): "Z"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005B,  // U+005B (91 dec): "["
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005C,  // U+005C (92 dec): "\"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000011000'000000,
    0b0000011000'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005D,  // U+005D (93 dec): "]"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0000001100'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005E,  // U+005E (94 dec): "^"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x005F,  // U+005F (95 dec): "_"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111111'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0060,  // U+0060 (96 dec): "`"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0001110000'000000,
    0b0000011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0061,  // U+0061 (97 dec): "a"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111100'000000,
    0b0011000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0062,  // U+0062 (98 dec): "b"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111001100'000000,
    0b0110111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0063,  // U+0063 (99 dec): "c"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111100'000000,
    0b0011000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0064,  // U+0064 (100 dec): "d"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0001110110'000000,
    0b0011001110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0065,  // U+0065 (101 dec): "e"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0066,  // U+0066 (102 dec): "f"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111100'000000,
    0b0001100110'000000,
    0b0001100110'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0111111000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0067,  // U+0067 (103 dec): "g"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111010'000000,
    0b0110001110'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0011111000'000000,
    0b0110000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111100'000000,
    0b0000000000'000000
    }
  },
  { 0x0068,  // U+0068 (104 dec): "h"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0069,  // U+0069 (105 dec): "i"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x006A,  // U+006A (106 dec): "j"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000000'000000,
    0b0000011110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0011000110'000000,
    0b0011000110'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000
    }
  },
  { 0x006B,  // U+006B (107 dec): "k"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110001100'000000,
    0b0110011000'000000,
    0b0110110000'000000,
    0b0111100000'000000,
    0b0111110000'000000,
    0b0110011000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x006C,  // U+006C (108 dec): "l"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x006D,  // U+006D (109 dec): "m"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0101101100'000000,
    0b0111111110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x006E,  // U+006E (110 dec): "n"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x006F,  // U+006F (111 dec): "o"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0070,  // U+0070 (112 dec): "p"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111001100'000000,
    0b0110111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0071,  // U+0071 (113 dec): "q"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110110'000000,
    0b0011001110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000000'000000
    }
  },
  { 0x0072,  // U+0072 (114 dec): "r"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110111100'000000,
    0b0011100110'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0011000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0073,  // U+0073 (115 dec): "s"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0110000000'000000,
    0b0011111100'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0074,  // U+0074 (116 dec): "t"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0111111000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100110'000000,
    0b0000111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0075,  // U+0075 (117 dec): "u"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0076,  // U+0076 (118 dec): "v"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0077,  // U+0077 (119 dec): "w"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0110110110'000000,
    0b0111111110'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0078,  // U+0078 (120 dec): "x"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0079,  // U+0079 (121 dec): "y"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000
    }
  },
  { 0x007A,  // U+007A (122 dec): "z"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111110'000000,
    0b0000000110'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0011111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x007B,  // U+007B (123 dec): "{"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111100000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000011110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x007C,  // U+007C (124 dec): "|"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x007D,  // U+007D (125 dec): "}"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111100000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000011110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x007E,  // U+007E (126 dec): "~"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011100110'000000,
    0b0110110110'000000,
    0b0110011100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x007F,  // U+007F (127 dec): ""
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A0,  // U+00A0 (160 dec): " "
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A1,  // U+00A1 (161 dec): "¡"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A2,  // U+00A2 (162 dec): "¢"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000100'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A3,  // U+00A3 (163 dec): "£"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111100'000000,
    0b0001100110'000000,
    0b0001100110'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0111111000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0111110000'000000,
    0b0101011011'000000,
    0b0111001110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A4,  // U+00A4 (164 dec): "¤"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0100000001'000000,
    0b0010111010'000000,
    0b0001111100'000000,
    0b0011000110'000000,
    0b0011000110'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0010111010'000000,
    0b0100000001'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A5,  // U+00A5 (165 dec): "¥"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0100000010'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A6,  // U+00A6 (166 dec): "¦"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A7,  // U+00A7 (167 dec): "§"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111000'000000,
    0b0110001100'000000,
    0b0110000000'000000,
    0b0111000000'000000,
    0b0111100000'000000,
    0b0100110000'000000,
    0b0110011000'000000,
    0b0011001100'000000,
    0b0001100100'000000,
    0b0000111100'000000,
    0b0000001100'000000,
    0b0110001100'000000,
    0b0011111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A8,  // U+00A8 (168 dec): "¨"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00A9,  // U+00A9 (169 dec): "©"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0101111010'000000,
    0b0101001010'000000,
    0b0101000010'000000,
    0b0101001010'000000,
    0b0101111010'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AA,  // U+00AA (170 dec): "ª"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111100'000000,
    0b0010000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AB,  // U+00AB (171 dec): "«"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000010010'000000,
    0b0000110110'000000,
    0b0001101100'000000,
    0b0011011000'000000,
    0b0110110000'000000,
    0b1101100000'000000,
    0b0110110000'000000,
    0b0011011000'000000,
    0b0001101100'000000,
    0b0000110110'000000,
    0b0000010010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AC,  // U+00AC (172 dec): "¬"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0111111110'000000,
    0b0000000110'000000,
    0b0000000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AD,  // U+00AD (173 dec): "­"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AE,  // U+00AE (174 dec): "®"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0101111010'000000,
    0b0101001010'000000,
    0b0101111010'000000,
    0b0101010010'000000,
    0b0101011010'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00AF,  // U+00AF (175 dec): "¯"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111100'000000,
    0b0111111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B0,  // U+00B0 (176 dec): "°"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B1,  // U+00B1 (177 dec): "±"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0111111110'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B2,  // U+00B2 (178 dec): "²"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110000'000000,
    0b0011011000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0011111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B3,  // U+00B3 (179 dec): "³"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110000'000000,
    0b0011011000'000000,
    0b0000001000'000000,
    0b0000111000'000000,
    0b0000001000'000000,
    0b0011011000'000000,
    0b0001110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B4,  // U+00B4 (180 dec): "´"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B5,  // U+00B5 (181 dec): "µ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0111011100'000000,
    0b0111110100'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B6,  // U+00B6 (182 dec): "¶"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111110'000000,
    0b0011111110'000000,
    0b0111110110'000000,
    0b0111110110'000000,
    0b0111110110'000000,
    0b0011110110'000000,
    0b0001110110'000000,
    0b0000010110'000000,
    0b0000010110'000000,
    0b0000010110'000000,
    0b0000010110'000000,
    0b0000010110'000000,
    0b0000010110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B7,  // U+00B7 (183 dec): "·"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B8,  // U+00B8 (184 dec): "¸"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000010000'000000,
    0b0001001000'000000,
    0b0000110000'000000,
    0b0000000000'000000
    }
  },
  { 0x00B9,  // U+00B9 (185 dec): "¹"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100000'000000,
    0b0011100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BA,  // U+00BA (186 dec): "º"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110000'000000,
    0b0011011000'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0011011000'000000,
    0b0001110000'000000,
    0b0000000000'000000,
    0b0111111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BB,  // U+00BB (187 dec): "»"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0100100000'000000,
    0b0110110000'000000,
    0b0011011000'000000,
    0b0001101100'000000,
    0b0000110110'000000,
    0b0000011011'000000,
    0b0000110110'000000,
    0b0001101100'000000,
    0b0011011000'000000,
    0b0110110000'000000,
    0b0100100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BC,  // U+00BC (188 dec): "¼"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0010000000'000000,
    0b0110000000'000000,
    0b0010000010'000000,
    0b0010000100'000000,
    0b0111001000'000000,
    0b0000010000'000000,
    0b0000100100'000000,
    0b0001001100'000000,
    0b0010010100'000000,
    0b0100111100'000000,
    0b0000000100'000000,
    0b0000000100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BD,  // U+00BD (189 dec): "½"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0010000000'000000,
    0b0110000000'000000,
    0b0010000010'000000,
    0b0010000100'000000,
    0b0111001000'000000,
    0b0000010000'000000,
    0b0000101100'000000,
    0b0001010010'000000,
    0b0010000010'000000,
    0b0100000100'000000,
    0b0000001000'000000,
    0b0000011110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BE,  // U+00BE (190 dec): "¾"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111000000'000000,
    0b0000100000'000000,
    0b0011000010'000000,
    0b0000100100'000000,
    0b0111001000'000000,
    0b0000010000'000000,
    0b0000100100'000000,
    0b0001001100'000000,
    0b0010010100'000000,
    0b0100111110'000000,
    0b0000000100'000000,
    0b0000000100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00BF,  // U+00BF (191 dec): "¿"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0011000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C0,  // U+00C0 (192 dec): "À"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C1,  // U+00C1 (193 dec): "Á"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C2,  // U+00C2 (194 dec): "Â"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C3,  // U+00C3 (195 dec): "Ã"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C4,  // U+00C4 (196 dec): "Ä"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C5,  // U+00C5 (197 dec): "Å"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001001000'000000,
    0b0001001000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C6,  // U+00C6 (198 dec): "Æ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000111110'000000,
    0b0001111000'000000,
    0b0011011000'000000,
    0b0011011000'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0111111110'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0110011000'000000,
    0b0110011110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C7,  // U+00C7 (199 dec): "Ç"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000010000'000000,
    0b0001001000'000000,
    0b0000110000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C8,  // U+00C8 (200 dec): "È"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00C9,  // U+00C9 (201 dec): "É"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CA,  // U+00CA (202 dec): "Ê"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CB,  // U+00CB (203 dec): "Ë"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CC,  // U+00CC (204 dec): "Ì"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CD,  // U+00CD (205 dec): "Í"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CE,  // U+00CE (206 dec): "Î"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00CF,  // U+00CF (207 dec): "Ï"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D0,  // U+00D0 (208 dec): "Ð"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111000'000000,
    0b0110001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b1111100110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110001100'000000,
    0b0111111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D1,  // U+00D1 (209 dec): "Ñ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0100000110'000000,
    0b0110000110'000000,
    0b0111000110'000000,
    0b0111100110'000000,
    0b0111110110'000000,
    0b0110111110'000000,
    0b0110011110'000000,
    0b0110001110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D2,  // U+00D2 (210 dec): "Ò"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D3,  // U+00D3 (211 dec): "Ó"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D4,  // U+00D4 (212 dec): "Ô"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D5,  // U+00D5 (213 dec): "Õ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D6,  // U+00D6 (214 dec): "Ö"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D7,  // U+00D7 (215 dec): "×"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0010000010'000000,
    0b0011000110'000000,
    0b0001101100'000000,
    0b0000111000'000000,
    0b0000111000'000000,
    0b0001101100'000000,
    0b0011000110'000000,
    0b0010000010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D8,  // U+00D8 (216 dec): "Ø"
    {
    0b0000000000'000000,
    0b0000000010'000000,
    0b0001111100'000000,
    0b0011001100'000000,
    0b0110001110'000000,
    0b0110001110'000000,
    0b0110010110'000000,
    0b0110010110'000000,
    0b0110010110'000000,
    0b0110100110'000000,
    0b0110100110'000000,
    0b0110100110'000000,
    0b0111000110'000000,
    0b0011001100'000000,
    0b0011111000'000000,
    0b0100000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00D9,  // U+00D9 (217 dec): "Ù"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DA,  // U+00DA (218 dec): "Ú"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DB,  // U+00DB (219 dec): "Û"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DC,  // U+00DC (220 dec): "Ü"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DD,  // U+00DD (221 dec): "Ý"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000001100'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0100000010'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DE,  // U+00DE (222 dec): "Þ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0001100000'000000,
    0b0001111100'000000,
    0b0001100110'000000,
    0b0001100110'000000,
    0b0001100110'000000,
    0b0001111100'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00DF,  // U+00DF (223 dec): "ß"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001110000'000000,
    0b0011111000'000000,
    0b0111001100'000000,
    0b0110001100'000000,
    0b0110001100'000000,
    0b0110011000'000000,
    0b0110110000'000000,
    0b0110011000'000000,
    0b0110001100'000000,
    0b0110000100'000000,
    0b0110001100'000000,
    0b0110111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E0,  // U+00E0 (224 dec): "à"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E1,  // U+00E1 (225 dec): "á"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E2,  // U+00E2 (226 dec): "â"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E3,  // U+00E3 (227 dec): "ã"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E4,  // U+00E4 (228 dec): "ä"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E5,  // U+00E5 (229 dec): "å"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001001000'000000,
    0b0001001000'000000,
    0b0000110000'000000,
    0b0011111100'000000,
    0b0110000110'000000,
    0b0000000110'000000,
    0b0011111110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011111010'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E6,  // U+00E6 (230 dec): "æ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011101100'000000,
    0b0100110110'000000,
    0b0000110110'000000,
    0b0000111100'000000,
    0b0011110000'000000,
    0b0110110000'000000,
    0b0110110010'000000,
    0b0011011100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E7,  // U+00E7 (231 dec): "ç"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111100'000000,
    0b0011000110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000110000'000000,
    0b0000010000'000000,
    0b0001001000'000000,
    0b0000110000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E8,  // U+00E8 (232 dec): "è"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00E9,  // U+00E9 (233 dec): "é"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00EA,  // U+00EA (234 dec): "ê"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00EB,  // U+00EB (235 dec): "ë"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0111111110'000000,
    0b0110000000'000000,
    0b0110000000'000000,
    0b0011000110'000000,
    0b0001111100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00EC,  // U+00EC (236 dec): "ì"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00ED,  // U+00ED (237 dec): "í"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00EE,  // U+00EE (238 dec): "î"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00EF,  // U+00EF (239 dec): "ï"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F0,  // U+00F0 (240 dec): "ð"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0100010000'000000,
    0b0110110000'000000,
    0b0011100000'000000,
    0b0011100000'000000,
    0b0110110000'000000,
    0b0100011000'000000,
    0b0001111100'000000,
    0b0011001110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F1,  // U+00F1 (241 dec): "ñ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110111000'000000,
    0b0111001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F2,  // U+00F2 (242 dec): "ò"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F3,  // U+00F3 (243 dec): "ó"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F4,  // U+00F4 (244 dec): "ô"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F5,  // U+00F5 (245 dec): "õ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100100'000000,
    0b0011111100'000000,
    0b0010011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F6,  // U+00F6 (246 dec): "ö"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F7,  // U+00F7 (247 dec): "÷"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0111111110'000000,
    0b0111111110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F8,  // U+00F8 (248 dec): "ø"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000010'000000,
    0b0001111100'000000,
    0b0011001100'000000,
    0b0110010110'000000,
    0b0110010110'000000,
    0b0110100110'000000,
    0b0110100110'000000,
    0b0011001100'000000,
    0b0011111000'000000,
    0b0100000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00F9,  // U+00F9 (249 dec): "ù"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011000000'000000,
    0b0001100000'000000,
    0b0000110000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FA,  // U+00FA (250 dec): "ú"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FB,  // U+00FB (251 dec): "û"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000110000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FC,  // U+00FC (252 dec): "ü"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FD,  // U+00FD (253 dec): "ý"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000011000'000000,
    0b0000110000'000000,
    0b0001100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FE,  // U+00FE (254 dec): "þ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011100000'000000,
    0b0001111000'000000,
    0b0001101100'000000,
    0b0001101100'000000,
    0b0001111000'000000,
    0b0001100000'000000,
    0b0001100000'000000,
    0b0011100000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x00FF,  // U+00FF (255 dec): "ÿ"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0011001100'000000,
    0b0011001100'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000
    }
  },
    // extra by pinterf, cherry pick from Latin 1 Ext
  { 0x0150,  // U+150 : "Ő"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100110'000000,
    0b0011001100'000000,
    0b0110011000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0151,  // U+151 : "ő"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100110'000000,
    0b0011001100'000000,
    0b0110011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001111000'000000,
    0b0011001100'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001100'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0170,  // U+0170 : "Ű"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100110'000000,
    0b0011001100'000000,
    0b0110011000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001111000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  },
  { 0x0171,  // U+0170 : "ű"
    {
    0b0000000000'000000,
    0b0000000000'000000,
    0b0001100110'000000,
    0b0011001100'000000,
    0b0110011000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0110000110'000000,
    0b0011001110'000000,
    0b0001110110'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000,
    0b0000000000'000000
    }
  }
};

void BitmapFont::makeMapping() {
  for (int i = 0; i < fonts->size(); i++)
    charReMap[(*fonts)[i].code] = i;
}

// helper function for remapping a char16_t string to font index entry list
std::vector<int> BitmapFont::remap(const std::u16string& s16) {
  // new vector with characters remapped to table indexes
  std::vector<int> s_remapped;
  s_remapped.resize(s16.size());
  for (int i = 0; i < s16.size(); i++) {
    auto it = charReMap.find(s16[i]);
    if (it != charReMap.end())
      s_remapped[i] = it->second;
    else
      s_remapped[i] = 0; // empty neutral character (space)
  }
  return s_remapped;
}

// generate outline on-the-fly
void BitmapFont::generateOutline(fixedFontRec_t& f, int x) const
{
  auto currentfont = (*fonts)[x].bitmap;
  for (int i = 0; i < h; i++)
    f.bitmap[i] = 0;

  auto make_dizzyLR = [](uint32_t fontline) {
    return (uint32_t)((fontline << 1) | (fontline >> 1));
  };
  auto make_dizzyLCR = [](uint32_t fontline) {
    return (uint32_t)(fontline | (fontline << 1) | (fontline >> 1));
  };

  // FIXME: not quite generic, still knowing the bit count is 10
  constexpr uint32_t mask = ((1 << 16) - 1) & ~((1 << 6) - 1); // upper 10 bits active in an uint16_t

  uint32_t prev_line = 0;
  uint32_t current_line;
  uint32_t next_line;
  for (int i = 0; i < h - 1; i++)
  {
    current_line = currentfont[i];
    next_line = currentfont[i + 1];
    uint32_t line = make_dizzyLCR(prev_line) | make_dizzyLR(current_line) | make_dizzyLCR(next_line);

    uint32_t value = (line & ~current_line) & mask;
    f.bitmap[i] = value;

    prev_line = current_line;
    current_line = next_line;
  }
  // last one, no next line
  uint32_t line = make_dizzyLCR(prev_line) | make_dizzyLR(current_line) | make_dizzyLCR(0);
  uint32_t value = (line & ~current_line) & mask;
  f.bitmap[h - 1] = value;
}

class BitmapFont_10_20 : public BitmapFont
{
public:
  BitmapFont_10_20() : BitmapFont(&font_10_20, 10, 20)
  {

  }
};

// font table definition WxH = 10x20 pixels
// Character is defined at the MSB 10 bits.
static const unsigned short font[][20] = {
  //STARTCHAR space 0x20
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR !
  {
    0x0000,0x0000,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0000,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR "
  {
    0x0000,0x0000,0x3300,0x3300,
    0x3300,0x1200,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR #
  {
    0x0000,0x0000,0x0000,0x0d80,
    0x0d80,0x0d80,0x3fc0,0x1b00,
    0x1b00,0x1b00,0x7f80,0x3600,
    0x3600,0x3600,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR $
  {
    0x0000,0x0000,0x0c00,0x3f00,
    0x6d80,0x6c00,0x6c00,0x6c00,
    0x3f00,0x0d80,0x0d80,0x0d80,
    0x6d80,0x3f00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR %
  {
    0x0000,0x0000,0x0000,0x3980,
    0x6d80,0x6f00,0x3b00,0x0600,
    0x0600,0x0c00,0x0c00,0x1b80,
    0x1ec0,0x36c0,0x3380,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR &
  {
    0x0000,0x0000,0x1c00,0x3600,
    0x3600,0x3600,0x3c00,0x1800,
    0x3800,0x6c00,0x66c0,0x6380,
    0x6300,0x7780,0x3cc0,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR '
  {
    0x0000,0x0000,0x0f00,0x0e00,
    0x1800,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR (
  {
    0x0000,0x0000,0x0300,0x0600,
    0x0c00,0x0c00,0x1800,0x1800,
    0x1800,0x1800,0x1800,0x0c00,
    0x0c00,0x0600,0x0300,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR )
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0c00,0x0600,0x0600,
    0x0600,0x0600,0x0600,0x0c00,
    0x0c00,0x1800,0x3000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR *
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x3300,0x3300,0x1e00,
    0x7f80,0x1e00,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR +
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0c00,0x0c00,0x0c00,
    0x7f80,0x0c00,0x0c00,0x0c00,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ,
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0e00,0x0e00,0x1800,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR -
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x7f80,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR .
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0e00,0x0e00,0x0e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR /
  {
    0x0000,0x0000,0x0000,0x0180,
    0x0180,0x0300,0x0300,0x0600,
    0x0600,0x0c00,0x0c00,0x1800,
    0x1800,0x3000,0x3000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 0
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x3300,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x3300,
    0x3300,0x1e00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 1
  {
    0x0000,0x0000,0x0c00,0x1c00,
    0x3c00,0x6c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 2
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x0180,0x0180,
    0x0300,0x0e00,0x1800,0x3000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 3
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x0180,0x0300,
    0x0e00,0x0300,0x0180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 4
  {
    0x0000,0x0000,0x0100,0x0300,
    0x0700,0x0f00,0x1b00,0x3300,
    0x6300,0x6300,0x7f80,0x0300,
    0x0300,0x0300,0x0300,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 5
  {
    0x0000,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x6000,0x6e00,
    0x7300,0x0180,0x0180,0x0180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 6
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6100,0x6000,0x6000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 7
  {
    0x0000,0x0000,0x7f80,0x0180,
    0x0180,0x0300,0x0300,0x0600,
    0x0600,0x0c00,0x0c00,0x1800,
    0x1800,0x3000,0x3000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 8
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x3300,
    0x1e00,0x3300,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 9
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x3380,0x1d80,0x0180,0x0180,
    0x2180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR :
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0e00,0x0e00,0x0000,
    0x0000,0x0000,0x0000,0x0e00,
    0x0e00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ;
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0e00,0x0e00,0x0000,
    0x0000,0x0000,0x0000,0x0e00,
    0x0e00,0x1c00,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR <
  {
    0x0000,0x0000,0x0100,0x0300,
    0x0600,0x0c00,0x1800,0x3000,
    0x6000,0x3000,0x1800,0x0c00,
    0x0600,0x0300,0x0100,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR =
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x7f80,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR >
  {
    0x0000,0x0000,0x2000,0x3000,
    0x1800,0x0c00,0x0600,0x0300,
    0x0180,0x0300,0x0600,0x0c00,
    0x1800,0x3000,0x2000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ?
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x0300,
    0x0600,0x0c00,0x0c00,0x0c00,
    0x0000,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR @
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6780,0x6f80,0x6d80,
    0x6d80,0x6d80,0x6f00,0x6600,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR A
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x3300,0x6180,0x6180,
    0x6180,0x7f80,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR B
  {
    0x0000,0x0000,0x7c00,0x6600,
    0x6300,0x6300,0x6300,0x6600,
    0x7e00,0x6300,0x6180,0x6180,
    0x6180,0x6300,0x7e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR C
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR D
  {
    0x0000,0x0000,0x7e00,0x6300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x6300,0x7e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR E
  {
    0x0000,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x7e00,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR F
  {
    0x0000,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x7e00,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR G
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6000,0x6000,0x6000,
    0x6780,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR H
  {
    0x0000,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x7f80,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR I
  {
    0x0000,0x0000,0x7f80,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR J
  {
    0x0000,0x0000,0x0f80,0x0180,
    0x0180,0x0180,0x0180,0x0180,
    0x0180,0x0180,0x0180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR K
  {
    0x0000,0x0000,0x6180,0x6180,
    0x6300,0x6300,0x6600,0x6600,
    0x7c00,0x6600,0x6600,0x6300,
    0x6300,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR L
  {
    0x0000,0x0000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR M
  {
    0x0000,0x0000,0x6180,0x6180,
    0x7380,0x7380,0x7f80,0x6d80,
    0x6d80,0x6d80,0x6d80,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR N
  {
    0x0000,0x0000,0x6180,0x7180,
    0x7180,0x7980,0x7980,0x6d80,
    0x6d80,0x6780,0x6780,0x6380,
    0x6380,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR O
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR P
  {
    0x0000,0x0000,0x7e00,0x6300,
    0x6180,0x6180,0x6180,0x6180,
    0x6300,0x7e00,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Q
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6d80,
    0x6780,0x3300,0x1f00,0x0180,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR R
  {
    0x0000,0x0000,0x7e00,0x6300,
    0x6180,0x6180,0x6180,0x6180,
    0x6300,0x7e00,0x6600,0x6300,
    0x6300,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR S
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6000,0x6000,0x3000,
    0x1e00,0x0300,0x0180,0x0180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR T
  {
    0x0000,0x0000,0x7f80,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR U
  {
    0x0000,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR V
  {
    0x0000,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x3300,0x3300,
    0x3300,0x1e00,0x1e00,0x1e00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR W
  {
    0x0000,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6d80,
    0x6d80,0x6d80,0x6d80,0x7380,
    0x7380,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR X
  {
    0x0000,0x0000,0x6180,0x6180,
    0x3300,0x3300,0x1e00,0x1e00,
    0x0c00,0x1e00,0x1e00,0x3300,
    0x3300,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Y
  {
    0x0000,0x0000,0x6180,0x6180,
    0x3300,0x3300,0x1e00,0x1e00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Z
  {
    0x0000,0x0000,0x7f80,0x0180,
    0x0180,0x0300,0x0600,0x0600,
    0x0c00,0x1800,0x1800,0x3000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR [
  {
    0x0000,0x0000,0x3f00,0x3000,
    0x3000,0x3000,0x3000,0x3000,
    0x3000,0x3000,0x3000,0x3000,
    0x3000,0x3000,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR \  ---
  {
    0x0000,0x0000,0x0000,0x3000,
    0x3000,0x1800,0x1800,0x0c00,
    0x0c00,0x0600,0x0600,0x0300,
    0x0300,0x0180,0x0180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ]
  {
    0x0000,0x0000,0x3f00,0x0300,
    0x0300,0x0300,0x0300,0x0300,
    0x0300,0x0300,0x0300,0x0300,
    0x0300,0x0300,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ^
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR _
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x7fc0,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR `
  {
    0x0000,0x0000,0x3c00,0x1c00,
    0x0600,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR a
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1f00,
    0x3180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR b
  {
    0x0000,0x0000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x7300,0x6e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR c
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1f00,
    0x3180,0x6000,0x6000,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR d
  {
    0x0000,0x0000,0x0180,0x0180,
    0x0180,0x0180,0x0180,0x1d80,
    0x3380,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR e
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x7f80,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR f
  {
    0x0000,0x0000,0x0f00,0x1980,
    0x1980,0x1800,0x1800,0x1800,
    0x1800,0x7e00,0x1800,0x1800,
    0x1800,0x1800,0x1800,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR g
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3e80,
    0x6380,0x6300,0x6300,0x6300,
    0x3e00,0x6000,0x3f00,0x6180,
    0x6180,0x6180,0x3f00,0x0000,
  },
  //STARTCHAR h
  {
    0x0000,0x0000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR i
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0c00,0x0c00,0x0000,0x3c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR j
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0180,0x0180,0x0000,0x0780,
    0x0180,0x0180,0x0180,0x0180,
    0x0180,0x0180,0x0180,0x3180,
    0x3180,0x3180,0x1f00,0x0000,
  },
  //STARTCHAR k
  {
    0x0000,0x0000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6300,
    0x6600,0x6c00,0x7800,0x7c00,
    0x6600,0x6300,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR l
  {
    0x0000,0x0000,0x3c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR m
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x5b00,
    0x7f80,0x6d80,0x6d80,0x6d80,
    0x6d80,0x6d80,0x6d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR n
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR o
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR p
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x7300,0x6e00,0x6000,
    0x6000,0x6000,0x6000,0x0000,
  },
  //STARTCHAR q
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1d80,
    0x3380,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0180,
    0x0180,0x0180,0x0180,0x0000,
  },
  //STARTCHAR r
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6f00,
    0x3980,0x3000,0x3000,0x3000,
    0x3000,0x3000,0x3000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR s
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3f00,
    0x6180,0x6000,0x3f00,0x0180,
    0x0180,0x6180,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR t
  {
    0x0000,0x0000,0x0000,0x0000,
    0x1800,0x1800,0x1800,0x7e00,
    0x1800,0x1800,0x1800,0x1800,
    0x1800,0x1980,0x0f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR u
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR v
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6180,
    0x6180,0x3300,0x3300,0x1e00,
    0x1e00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR w
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6d80,0x6d80,
    0x6d80,0x7f80,0x3300,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR x
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6180,
    0x3300,0x1e00,0x0c00,0x0c00,
    0x1e00,0x3300,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR y
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0180,
    0x6180,0x3300,0x1e00,0x0000,
  },
  //STARTCHAR z
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3f80,
    0x0180,0x0300,0x0600,0x0c00,
    0x1800,0x3000,0x3f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR {
  {
    0x0000,0x0000,0x0780,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x7800,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0780,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR bar
  {
    0x0000,0x0000,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR }
  {
    0x0000,0x0000,0x7800,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0780,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7800,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ~
  {
    0x0000,0x0000,0x3980,0x6d80,
    0x6700,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR C177
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR C240
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR exclamdown
  {
    0x0000,0x0000,0x0c00,0x0c00,
    0x0000,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR cent
  {
    0x0000,0x0000,0x0000,0x0c00,
    0x0c00,0x1e00,0x3300,0x6100,
    0x6000,0x6000,0x6100,0x3300,
    0x1e00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR sterling
  {
    0x0000,0x0000,0x0000,0x0f00,
    0x1980,0x1980,0x1800,0x1800,
    0x7e00,0x1800,0x1800,0x1800,
    0x7c00,0x56c0,0x7380,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR currency
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x4040,0x2e80,0x1f00,
    0x3180,0x3180,0x3180,0x1f00,
    0x2e80,0x4040,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR yen
  {
    0x0000,0x0000,0x0000,0x0000,
    0x4080,0x6180,0x3300,0x1e00,
    0x3f00,0x0c00,0x3f00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR brokenbar
  {
    0x0000,0x0000,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR section
  {
    0x0000,0x0000,0x3e00,0x6300,
    0x6000,0x7000,0x7800,0x4c00,
    0x6600,0x3300,0x1900,0x0f00,
    0x0300,0x6300,0x3e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR dieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR copyright
  {
    0x0000,0x0000,0x0000,0x0000,
    0x1e00,0x3300,0x6180,0x5e80,
    0x5280,0x5080,0x5280,0x5e80,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ordfeminine
  {
    0x0000,0x0000,0x1f00,0x2180,
    0x0180,0x3f80,0x6180,0x6180,
    0x3e80,0x0000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR guillmotleft
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0480,0x0d80,0x1b00,0x3600,
    0x6c00,0xd800,0x6c00,0x3600,
    0x1b00,0x0d80,0x0480,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR logicalnot
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x7f80,
    0x7f80,0x0180,0x0180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR hyphen
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3f00,
    0x3f00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR registered
  {
    0x0000,0x0000,0x0000,0x0000,
    0x1e00,0x3300,0x6180,0x5e80,
    0x5280,0x5e80,0x5480,0x5680,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR macron
  {
    0x0000,0x0000,0x0000,0x7f00,
    0x7f00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR degree
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x3300,0x1e00,0x0c00,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR plusminus
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0c00,0x0c00,0x7f80,0x7f80,
    0x0c00,0x0c00,0x0000,0x7f80,
    0x7f80,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR twosuperior
  {
    0x0000,0x0000,0x1c00,0x3600,
    0x0600,0x0c00,0x1800,0x3000,
    0x3e00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR threesuperior
  {
    0x0000,0x0000,0x1c00,0x3600,
    0x0200,0x0e00,0x0200,0x3600,
    0x1c00,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR acute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR mu
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x6300,0x6300,0x6300,0x6300,
    0x6300,0x7700,0x7d00,0x6000,
    0x6000,0x6000,0x0000,0x0000,
  },
  //STARTCHAR paragraph
  {
    0x0000,0x0000,0x1f80,0x3f80,
    0x7d80,0x7d80,0x7d80,0x3d80,
    0x1d80,0x0580,0x0580,0x0580,
    0x0580,0x0580,0x0580,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR periodcentered
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0e00,
    0x0e00,0x0e00,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR cedilla
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0c00,
    0x0400,0x1200,0x0c00,0x0000,
  },
  //STARTCHAR onesuperior
  {
    0x0000,0x0000,0x1800,0x3800,
    0x1800,0x1800,0x1800,0x3c00,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ordmasculine
  {
    0x0000,0x0000,0x1c00,0x3600,
    0x6300,0x6300,0x6300,0x3600,
    0x1c00,0x0000,0x7f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR guillemotright
  {
    0x0000,0x0000,0x0000,0x0000,
    0x4800,0x6c00,0x3600,0x1b00,
    0x0d80,0x06c0,0x0d80,0x1b00,
    0x3600,0x6c00,0x4800,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR onequarter
  {
    0x0000,0x0000,0x2000,0x6000,
    0x2080,0x2100,0x7200,0x0400,
    0x0900,0x1300,0x2500,0x4f00,
    0x0100,0x0100,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR onehalf
  {
    0x0000,0x0000,0x2000,0x6000,
    0x2080,0x2100,0x7200,0x0400,
    0x0b00,0x1480,0x2080,0x4100,
    0x0200,0x0780,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR threequarters
  {
    0x0000,0x0000,0x7000,0x0800,
    0x3080,0x0900,0x7200,0x0400,
    0x0900,0x1300,0x2500,0x4f80,
    0x0100,0x0100,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR questiondown
  {
    0x0000,0x0000,0x0c00,0x0c00,
    0x0000,0x0c00,0x0c00,0x0c00,
    0x1800,0x3000,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Agrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Aacute
  {
    0x0000,0x0000,0x0300,0x0600,
    0x0c00,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Acircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Atilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Adieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Aring
  {
    0x0000,0x0000,0x0c00,0x1200,
    0x1200,0x0c00,0x0c00,0x1e00,
    0x3300,0x6180,0x6180,0x7f80,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR AE
  {
    0x0000,0x0000,0x0f80,0x1e00,
    0x3600,0x3600,0x6600,0x6600,
    0x7f80,0x6600,0x6600,0x6600,
    0x6600,0x6600,0x6780,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ccedilla
  {
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6000,0x6000,0x6000,
    0x6000,0x6000,0x6000,0x6000,
    0x6180,0x3300,0x1e00,0x0c00,
    0x0400,0x1200,0x0c00,0x0000,
  },
  //STARTCHAR Egrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x7e00,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Eacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x7e00,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ecircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x7e00,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Edieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x7f80,0x6000,
    0x6000,0x6000,0x7e00,0x6000,
    0x6000,0x6000,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Igrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x3f00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Iacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x3f00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Icircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x3f00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Idieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x3f00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x3f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Eth
  {
    0x0000,0x0000,0x7e00,0x6300,
    0x6180,0x6180,0x6180,0x6180,
    0xf980,0x6180,0x6180,0x6180,
    0x6180,0x6300,0x7e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ntilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x4180,0x6180,
    0x7180,0x7980,0x7d80,0x6f80,
    0x6780,0x6380,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ograve
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Oacute
  {
    0x0000,0x0000,0x0300,0x0600,
    0x0c00,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ocircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Otilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Odieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x1e00,0x3300,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR multiply
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x2080,
    0x3180,0x1b00,0x0e00,0x0e00,
    0x1b00,0x3180,0x2080,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Oslash
  {
    0x0000,0x0080,0x1f00,0x3300,
    0x6380,0x6380,0x6580,0x6580,
    0x6580,0x6980,0x6980,0x6980,
    0x7180,0x3300,0x3e00,0x4000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ugrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Uacute
  {
    0x0000,0x0000,0x0300,0x0600,
    0x0c00,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Ucircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Udieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Yacute
  {
    0x0000,0x0000,0x0300,0x0600,
    0x0c00,0x0000,0x4080,0x6180,
    0x3300,0x1e00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x0c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR Thorn
  {
    0x0000,0x0000,0x0000,0x0000,
    0x3c00,0x1800,0x1f00,0x1980,
    0x1980,0x1980,0x1f00,0x1800,
    0x1800,0x1800,0x3c00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR germandbls
  {
    0x0000,0x0000,0x0000,0x1c00,
    0x3e00,0x7300,0x6300,0x6300,
    0x6600,0x6c00,0x6600,0x6300,
    0x6100,0x6300,0x6e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR agave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0000,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR aacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR acircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0000,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR atilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x0000,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR adieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR aring
  {
    0x0000,0x0000,0x0000,0x0c00,
    0x1200,0x1200,0x0c00,0x3f00,
    0x6180,0x0180,0x3f80,0x6180,
    0x6180,0x6180,0x3e80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ae
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3b00,
    0x4d80,0x0d80,0x0f00,0x3c00,
    0x6c00,0x6c80,0x3700,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR 0xccedilla
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x1f00,
    0x3180,0x6000,0x6000,0x6000,
    0x6000,0x3180,0x1f00,0x0c00,
    0x0400,0x1200,0x0c00,0x0000,
  },
  //STARTCHAR egrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x7f80,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR eacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x7f80,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ecircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x7f80,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR edieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x7f80,0x6000,
    0x6000,0x3180,0x1f00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR igrave
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0000,0x3c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR iacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x3c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR icircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0000,0x3c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR idieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x3c00,
    0x0c00,0x0c00,0x0c00,0x0c00,
    0x0c00,0x0c00,0x7f80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR eth
  {
    0x0000,0x0000,0x4400,0x6c00,
    0x3800,0x3800,0x6c00,0x4600,
    0x1f00,0x3380,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ntilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x0000,0x6e00,
    0x7300,0x6180,0x6180,0x6180,
    0x6180,0x6180,0x6180,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ograve
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR oacute
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ocircumflex
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR otilde
  {
    0x0000,0x0000,0x1900,0x3f00,
    0x2600,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR odieresis
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x1e00,
    0x3300,0x6180,0x6180,0x6180,
    0x6180,0x3300,0x1e00,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR divide
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0c00,0x0c00,0x0000,0x0000,
    0x7f80,0x7f80,0x0000,0x0000,
    0x0c00,0x0c00,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR oslash 0xD8
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0080,0x1f00,
    0x3300,0x6580,0x6580,0x6980,
    0x6980,0x3300,0x3e00,0x4000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ugrave 0xD9
  {
    0x0000,0x0000,0x3000,0x1800,
    0x0c00,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR uacute 0xDA
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ucircumflex 0xDB
  {
    0x0000,0x0000,0x0c00,0x1e00,
    0x3300,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR udieresis 0xDC
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x6180,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR yacute 0xDD
  {
    0x0000,0x0000,0x0600,0x0c00,
    0x1800,0x0000,0x0000,0x0000,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0180,
    0x6180,0x3300,0x1e00,0x0000,
  },
  //STARTCHAR thorn 0xDE
  {
    0x0000,0x0000,0x0000,0x0000,
    0x0000,0x0000,0x0000,0x3800,
    0x1e00,0x1b00,0x1b00,0x1e00,
    0x1800,0x1800,0x3800,0x0000,
    0x0000,0x0000,0x0000,0x0000,
  },
  //STARTCHAR ydieresis 0xDF
  {
    0x0000,0x0000,0x3300,0x3300,
    0x0000,0x0000,0x0000,0x0000,
    0x6180,0x6180,0x6180,0x6180,
    0x6180,0x3380,0x1d80,0x0180,
    0x6180,0x3300,0x1e00,0x0000,
  }
};

static constexpr int ATA_LEFT = 1;
static constexpr int ATA_RIGHT = 2;
static constexpr int ATA_CENTER = 4;

static constexpr int ATA_TOP = 8;
static constexpr int ATA_BOTTOM = 16;
static constexpr int ATA_BASELINE = 32;

static int alignToBitmask(int align_1_to_9)
{
  // alignment 1-9: digit positions on numeric keypad
  int al = 0;
  switch (align_1_to_9) // This spec where [X, Y] is relative to the text (inverted logic)
  {
  case 1: al = ATA_BOTTOM | ATA_LEFT; break;     // .----
  case 2: al = ATA_BOTTOM | ATA_CENTER; break;   // --.--
  case 3: al = ATA_BOTTOM | ATA_RIGHT; break;    // ----.
  case 4: al = ATA_BASELINE | ATA_LEFT; break;   // .____
  case 5: al = ATA_BASELINE | ATA_CENTER; break; // __.__
  case 6: al = ATA_BASELINE | ATA_RIGHT; break;  // ____.
  case 7: al = ATA_TOP | ATA_LEFT; break;        // `----
  case 8: al = ATA_TOP | ATA_CENTER; break;      // --`--
  case 9: al = ATA_TOP | ATA_RIGHT; break;       // ----`
  default: al = ATA_BASELINE | ATA_LEFT; break;  // .____
  }
  return al;
}

static int getColorForPlane(int plane, int color)
{
  switch (plane) {
  case PLANAR_A:
    return (color >> 24) & 0xff; break;
  case PLANAR_R:
  case PLANAR_Y:
    return (color >> 16) & 0xff; break;
  case PLANAR_G:
  case PLANAR_U:
    return (color >> 8) & 0xff; break;
  case PLANAR_B:
  case PLANAR_V:
    return color & 0xff; break;
  }
  return color & 0xFF;
}

template<typename pixel_t, int bits_per_pixel, bool fadeBackground, bool isRGB>
void LightOneUVPixel(const bool lightIt, pixel_t* _dstpU, int j, pixel_t& color_u, pixel_t* _dstpV, pixel_t& color_v);

template<typename pixel_t, int bits_per_pixel, bool fadeBackground, bool isRGB>
static void LightOnePixel(const bool lightIt, pixel_t* _dstp, int j, pixel_t& val_color);

/*
template<typename pixel_t, int bits_per_pixel, bool fadeBackground, int rgbsize_3_4>
void AVS_FORCEINLINE LightOnePackedRGBPixel(const bool lightIt, pixel_t* dstp, int j, pixel_t val_color_r, pixel_t val_color_g, pixel_t val_color_b)
{
  if (lightIt) { // character definition bits aligned to msb
    dstp[j * rgbsize_3_4] = val_color_b;
    dstp[j * rgbsize_3_4 + 1] = val_color_g;
    dstp[j * rgbsize_3_4 + 2] = val_color_r;
  }
  else {
    if constexpr (fadeBackground) {
      // background darkening
      // only 8 and 16 bits
      dstp[j * rgbsize_3_4] = (pixel_t)((dstp[j * rgbsize_3_4] * 7) >> 3);
      dstp[j * rgbsize_3_4 + 1] = (pixel_t)((dstp[j * rgbsize_3_4 + 1] * 7) >> 3);
      dstp[j * rgbsize_3_4 + 2] = (pixel_t)((dstp[j * rgbsize_3_4 + 2] * 7) >> 3);
    }
  }
}
*/

template<bool fadeBackground>
void AVS_FORCEINLINE LightOnePixelYUY2(const bool lightIt, BYTE* dp, int val_color, int val_color_U, int val_color_V)
{
  if (lightIt) { // character definition bits aligned to msb
    if (size_t(dp) & 2) { // Assume dstp is dword aligned
      dp[0] = val_color;
      dp[-1] = val_color_U;
      dp[1] = val_color_V;
    }
    else {
      dp[0] = val_color;
      dp[1] = val_color_U;
      dp[3] = val_color_V;
    }
  }
  else {
    if constexpr (fadeBackground) {
      if (size_t(dp) & 2) {
        dp[0] = (unsigned char)((dp[0] * 7) >> 3) + 2;
        dp[-1] = (unsigned char)((dp[-1] * 7) >> 3) + 16;
        dp[1] = (unsigned char)((dp[1] * 7) >> 3) + 16;
      }
      else {
        dp[0] = (unsigned char)((dp[0] * 7) >> 3) + 2;
        dp[1] = (unsigned char)((dp[1] * 7) >> 3) + 16;
        dp[3] = (unsigned char)((dp[3] * 7) >> 3) + 16;
      }
    }
  }
}

template<typename pixel_t, bool fadeBackground>
void AVS_FORCEINLINE LightOnePixelRGB(const bool lightIt, BYTE* _dp, int val_color_R, int val_color_G, int val_color_B)
{
  pixel_t* dp = reinterpret_cast<pixel_t*>(_dp);
  if (lightIt) { // character definition bits aligned to msb
    dp[0] = val_color_B;
    dp[1] = val_color_G;
    dp[2] = val_color_R;
  }
  else {
    if constexpr (fadeBackground) {
      dp[0] = (pixel_t)((dp[0] * 7) >> 3);
      dp[1] = (pixel_t)((dp[1] * 7) >> 3);
      dp[2] = (pixel_t)((dp[2] * 7) >> 3);
    }
  }
}

template<typename pixel_t, int bits_per_pixel, bool fadeBackground, bool isRGB>
void AVS_FORCEINLINE LightOnePixel(const bool lightIt, pixel_t* dstp, int j, pixel_t& val_color)
{
  if (lightIt) { // character definition bits aligned to msb
    dstp[j] = val_color;
  }
  else {
    // 16 = y_min
    // speed optimization: one subtraction less, 5-8% faster
    // (((Y - 16) * 7) >> 3) + 16 = ((Y * 7) >> 3) + 2
    // in general: ((Y * 7) >> 3) + n, where n = range_min - ((range_min * 7) >> 3)
    if constexpr (fadeBackground) {
      // background darkening
      if constexpr (isRGB) {
        if constexpr (sizeof(pixel_t) != 4)
          dstp[j] = (pixel_t)((dstp[j] * 7) >> 3);
        else {
          constexpr float factor = 7.0f / 8;
          dstp[j] = (pixel_t)(dstp[j] * factor);
        }
      }
      else {
        if constexpr (sizeof(pixel_t) != 4) {
          constexpr int range_min = 16 << (bits_per_pixel - 8);
          constexpr int n = range_min - ((range_min * 7) >> 3);
          dstp[j] = (pixel_t)(((dstp[j] * 7) >> 3) + n); // (_dstp[j] - range_min) * 7) >> 3) + range_min);
        }
        else {
          constexpr float range_min_f = 16.0f / 255.0f;
          dstp[j] = (pixel_t)(((dstp[j] - range_min_f) * 7 / 8) + range_min_f);
        }
      }
    }
  }
}

template<typename pixel_t, int bits_per_pixel, bool fadeBackground, bool isRGB>
static void LightOneUVPixel(const bool lightIt, pixel_t* dstpU, int j, pixel_t& color_u, pixel_t* dstpV, pixel_t& color_v)
{
  if (lightIt) { // lit if any font pixels are on under the 1-2-4 pixel-wide mask
      dstpU[j] = color_u; // originally: neutral U and V (128)
      dstpV[j] = color_v;
  }
  else {
    // speed optimization: one subtraction less
    // (((U - 128) * 7) >> 3) + 128 = ((U * 7) >> 3) + 16
    // in general: ((U * 7) >> 3) + n where n = range_half - ((range_half * 7) >> 3)
    if constexpr (fadeBackground) {
      if constexpr (sizeof(pixel_t) != 4) {
        constexpr int range_half = 1 << (bits_per_pixel - 1);
        constexpr int n = range_half - ((range_half * 7) >> 3);
        dstpU[j] = (pixel_t)(((dstpU[j] * 7) >> 3) + n); // ((((U - range_half) * 7) >> 3) + range_half);
        dstpV[j] = (pixel_t)(((dstpV[j] * 7) >> 3) + n);
      }
      else {
#ifdef FLOAT_CHROMA_IS_HALF_CENTERED
        constexpr float shift = 0.5f;
#else
        constexpr float shift = 0.0f;
#endif
        constexpr float factor = 7.0f / 8.0f;
        dstpU[j] = (pixel_t)(((dstpU[j] - shift) * factor) + shift);
        dstpV[j] = (pixel_t)(((dstpV[j] - shift) * factor) + shift);
      }
    }
  }
}

/* returns the biggest integer x such as 2^x <= i */
static int ilog2(int i)
{
  int result = 0;
  while (i > 1) { i /= 2; result++; }
  return result;
}


static void adjustWriteLimits(std::vector<int>& s, const int width, const int height, const int FONT_WIDTH, const int FONT_HEIGHT, int align, int& x, int& y, int& len, int& startindex, int& xstart, int& ystart, int& yend)
{
  const int al = alignToBitmask(align);

  // alignment X
  if (al & ATA_RIGHT)
    x -= (FONT_WIDTH * len + 1);
  else if (al & ATA_CENTER)
    x -= (FONT_WIDTH * len / 2);

  // alignment Y
  if (al & ATA_BASELINE)
    y -= FONT_HEIGHT / 2;
  else if (al & ATA_BOTTOM)
    y -= (FONT_HEIGHT + 1);

  // Chop text if exceed right margin
  if (len * FONT_WIDTH > width - x)
    len = (width - x) / FONT_WIDTH;

  startindex = 0;
  xstart = 0;
  // Chop 1st char if exceed left margin
  if (x < 0) {
    startindex = (-x) / FONT_WIDTH;
    xstart = (-x) % FONT_WIDTH;
    x = 0;
  }

  ystart = 0;
  yend = FONT_HEIGHT;
  // Chop font if exceed bottom margin
  if (y > height - FONT_HEIGHT)
    yend = height - y;

  // Chop font if exceed top margin
  if (y < 0) {
    ystart = -y;
    y = 0;
  }

  // Roll in start index
  if (startindex > 0) {
    s.erase(s.begin(), s.begin() + startindex - 1);
    len -= startindex;
  }
}

template<int bits_per_pixel, bool fadeBackground, bool isRGB>
void do_DrawStringPlanar(const int width, const int height, BYTE **dstps, int *pitches, const int logXRatioUV, const int logYRatioUV, const int planeCount,
  const BitmapFont& bmfont, int x, int y, std::vector<int>& s, int color, int halocolor, int align, bool useHalocolor)
{
  // define pixel_t as uint8_t, uint16_t or float, based on bits_per_pixel
  typedef typename std::conditional<bits_per_pixel == 8, uint8_t, typename std::conditional < bits_per_pixel <= 16, uint16_t, float > ::type >::type pixel_t;

  fixedFontRec_t current_outlined_char;

  const fixedFontArray& fonts = *bmfont.fonts;
  const int FONT_WIDTH = bmfont.w;
  const int FONT_HEIGHT = bmfont.h;

  // x, y: pixels
  // characters: 10x20 pixels
  int planes_y[4] = { PLANAR_Y, PLANAR_U, PLANAR_V, PLANAR_A };
  int planes_r[4] = { PLANAR_G, PLANAR_B, PLANAR_R, PLANAR_A };
  int* planes = isRGB ? planes_r : planes_y;

  const int pixelsize = sizeof(pixel_t);

  // Default string length
  int len = (int)s.size();
  int startindex;
  int xstart;
  int ystart;
  int yend;

  adjustWriteLimits(s, width, height, FONT_WIDTH, FONT_HEIGHT, align,
    // adjusted parameters
    x, y, len, startindex, xstart, ystart, yend);

  if (len <= 0)
    return;

  pixel_t val_color;
  pixel_t val_color_outline;

  // some helper lambdas
  auto getHBDColor_UV = [](int color) {
    if constexpr (bits_per_pixel < 32)
      return (pixel_t)(color << (bits_per_pixel - 8));
#ifdef FLOAT_CHROMA_IS_HALF_CENTERED
    constexpr float shift = 0.5f;
#else
    constexpr float shift = 0.0f;
#endif
    return (pixel_t)((color - 128) / 255.0f + shift); // 32 bit float chroma 128=0.5
  };

  auto getHBDColor_Y = [](int color) {
    if constexpr (bits_per_pixel < 32)
      return (pixel_t)(color << (bits_per_pixel - 8));
    return (pixel_t)(color / 255.0f); // 0..255 -> 0..1.0
  };

  auto getHBDColor_RGB = [](int color) {
    if constexpr (bits_per_pixel <= 16) {
      constexpr int max_pixel_value = (1 << (bits_per_pixel & 31)) - 1;
      return (pixel_t)(color * max_pixel_value / 255); // 0..255 --> 0..1023,4095,16383,65535
    }
    return (pixel_t)(color / 255.0f); // 0..255 -> 0..1.0
  };

  for (int p = 0; p < planeCount; p++)
  {
    int plane = planes[p];

    if (!isRGB && plane != PLANAR_Y)
      continue; // handle U and V specially. Y, R, G, B is O.K.

    int planecolor = getColorForPlane(plane, color);
    int planecolor_outline = getColorForPlane(plane, halocolor);
    if (isRGB) {
      val_color = getHBDColor_RGB(planecolor);
      val_color_outline = getHBDColor_RGB(planecolor_outline);
    }
    else if (plane == PLANAR_U || plane == PLANAR_V) {
      val_color = getHBDColor_UV(planecolor);
      val_color_outline = getHBDColor_UV(planecolor_outline);
    }
    else {// Y
      val_color = getHBDColor_Y(planecolor);
      val_color_outline = getHBDColor_Y(planecolor_outline);
    }

    const int pitch = pitches[p];
    BYTE* dstp = dstps[p] + x * pixelsize + y * pitch;

    // Start rendering
    for (int ty = ystart; ty < yend; ty++) {
      int num = s[0];

      unsigned int fontline;
      unsigned int fontoutline;

      fontline = fonts[num].bitmap[ty] << xstart; // shift some pixels if leftmost is chopped

      if (useHalocolor) {
        bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
        fontoutline = current_outlined_char.bitmap[ty] << xstart; // shift some pixels if leftmost is chopped
      }

      int current_xstart = xstart; // leftmost can be chopped
      int j = 0;
      pixel_t* _dstp = reinterpret_cast<pixel_t*>(dstp);

      for (int i = 0; i < len; i++) {
        for (int tx = current_xstart; tx < FONT_WIDTH; tx++) {
          const bool lightIt = fontline & 0x8000;
          LightOnePixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(lightIt, _dstp, j, val_color);
          if (useHalocolor) {
            if (!lightIt) // it can be outline
              LightOnePixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(fontoutline & 0x8000, _dstp, j, val_color_outline);
          }
          j += 1;
          fontline <<= 1; // next pixel to the left
          if (useHalocolor)
            fontoutline <<= 1;
        }
        current_xstart = 0; // further characters are not chopped

        if (i + 1 < len)
        {
          num = s[i + 1];
          if (useHalocolor) {
            bmfont.generateOutline(current_outlined_char, num);
            fontoutline = current_outlined_char.bitmap[ty]; // shift some pixels if leftmost is chopped
          }
          fontline = fonts[num].bitmap[ty];
        }
      }
      dstp += pitch;
    }
  }

  if constexpr (isRGB)
    return;

  if (planeCount < 3)
    return; // Y

  // draw U and V in one step
  pixel_t color_u = getHBDColor_UV((color >> 8) & 0xff);
  pixel_t color_v = getHBDColor_UV(color & 0xff);
  pixel_t color_outline_u = getHBDColor_UV((halocolor >> 8) & 0xff);
  pixel_t color_outline_v = getHBDColor_UV(halocolor & 0xff);

  const int pitchUV = pitches[1];

  // .SubS = 1, 2 or 4
  const int xSubS = 1 << logXRatioUV;
  const int ySubS = 1 << logYRatioUV;
  const int offset = (x >> logXRatioUV) * pixelsize + (y >> logYRatioUV) * pitchUV;

  BYTE* dstpU = dstps[1] + offset;
  BYTE* dstpV = dstps[2] + offset;

  // fontmask = 0x2000000, 0x3000000 or 0x3C00000; 1, 2 or 4 bits
  unsigned int fontmask = 0;
  for (int i = 0; i < xSubS; i++) {
    fontmask >>= 1;
    fontmask |= 0x8000 << FONT_WIDTH;
  }

  /*
        U and V handling, multiple possible source for a given
        01 23 45 67 89 01
        .. .. OO O. .. ..
        .. .O .. .O .. ..
        .. .O .. .O .. ..
  */

  for (int ty = ystart; ty < yend; ty += ySubS) {
    int i, j, num;
    unsigned int fontline = 0;
    unsigned int fontoutline = 0;

    // two characters at a time

    num = s[0];
    // Or in vertical subsampling of glyph
    for (int m = 0; m < ySubS; m++) fontline |= fonts[num].bitmap[ty + m];
    if (useHalocolor) {
      bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
      for (int m = 0; m < ySubS; m++) fontoutline |= current_outlined_char.bitmap[ty + m];
    }
    //             AAAAAAAAAA000000
    //             BBBBBBBBBB000000
    //             aaaaaaaaaa000000 // or'd

    fontline <<= FONT_WIDTH; // Move 1st glyph up
    if (useHalocolor) fontoutline <<= FONT_WIDTH;
    //   aaaaaaaaaa0000000000000000 // shift up by 10

    if (1 < len) {
      num = s[1];
      // Or in vertical subsampling of 2nd glyph
      for (int m = 0; m < ySubS; m++) fontline |= fonts[num].bitmap[ty + m];
      if (useHalocolor) {
        bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
        for (int m = 0; m < ySubS; m++) fontoutline |= current_outlined_char.bitmap[ty + m];
      }
    }

    //   aaaaaaaaaa0000000000000000
    //             CCCCCCCCCC000000
    //             DDDDDDDDDD000000
    //   aaaaaaaaaabbbbbbbbbb000000 // two fonts together
    //   fontmasks  (depends on horizontal subsampling)
    //   1000......................
    //   1100......................
    //   1111......................

    // Cope with left crop of glyph
    fontline <<= xstart;
    if (useHalocolor) fontoutline <<= xstart;
    int _xs = xstart;

    pixel_t* _dstpU = reinterpret_cast<pixel_t*>(dstpU);
    pixel_t* _dstpV = reinterpret_cast<pixel_t*>(dstpV);

    // handle two characters at a time because one pixel may consist of two fonts
    // when we have horizontal subsampling.
    // Note: extremely ugly for 411!
    for (i = 1, j = 0; i < len; i += 2) {
      for (int tx = _xs; tx < 2 * FONT_WIDTH; tx += xSubS) {
        const bool lightIt = (fontline & fontmask);
        LightOneUVPixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(lightIt, _dstpU, j, color_u, _dstpV, color_v);
        if (useHalocolor) {
          if (!lightIt) // it can be outline
            LightOneUVPixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(fontoutline & fontmask, _dstpU, j, color_outline_u, _dstpV, color_outline_v);
        }
        j += 1;
        fontline <<= xSubS;
        if (useHalocolor)
          fontoutline <<= xSubS;
      }
      _xs = 0;
      fontline = 0;
      if (useHalocolor)
        fontoutline = 0;

      if (i + 1 < len) {
        num = s[i + 1];
        for (int m = 0; m < ySubS; m++) fontline |= fonts[num].bitmap[ty + m];
        fontline <<= FONT_WIDTH;

        if (useHalocolor) {
          bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
          for (int m = 0; m < ySubS; m++) fontoutline |= current_outlined_char.bitmap[ty + m];
          fontoutline <<= FONT_WIDTH;
        }

        if (i + 2 < len) {
          num = s[i + 2];
          for (int m = 0; m < ySubS; m++) fontline |= fonts[num].bitmap[ty + m];

          if (useHalocolor) {
            bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
            for (int m = 0; m < ySubS; m++) fontoutline |= current_outlined_char.bitmap[ty + m];
          }
        }
      }
    }

    // Do odd length last glyph
    if (i == len) {
      for (int tx = _xs; tx < FONT_WIDTH; tx += xSubS) {
        const bool lightIt = (fontline & fontmask);
        LightOneUVPixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(lightIt, _dstpU, j, color_u, _dstpV, color_v);
        if (useHalocolor) {
          if (!lightIt) // it can be outline
            LightOneUVPixel<pixel_t, bits_per_pixel, fadeBackground, isRGB>(fontoutline & fontmask, _dstpU, j, color_outline_u, _dstpV, color_outline_v);
        }
        j += 1;
        fontline <<= xSubS;
        if (useHalocolor)
          fontoutline <<= xSubS;
      }
    }
    dstpU += pitchUV;
    dstpV += pitchUV;
  }
}


#if 0
#include <fstream>
#include <locale>
#include <cuchar>
#include <codecvt>
static void SaveBitmapSource()
{
  return;
  // https://unicode.org/charts/
  // Latin-1 Supplement 00A0-00FF // https://unicode.org/charts/PDF/U0080.pdf
  // Latin Extended - A Range: 0100–017F, https://unicode.org/charts/PDF/U0100.pdf
  // Latin Extended - B Range: 0180–024F, https://unicode.org/charts/PDF/U0180.pdf

  std::ofstream fout("c:\\x\\filename.txt");
  fout << "static const fontdef fonts[] = {" << std::endl;
  char buff[100];
  for (int i = 0; i < 192; i++)
  {
    int realcode;
    realcode = i + 32;
    if (realcode >= 128) realcode += 32;

    // char16_t to utf8
    std::mbstate_t state{};
    char out[MB_LEN_MAX+1]{};
    char16_t c = realcode;
    std::size_t rc = std::c16rtomb(out, c, &state);
    if (rc != (std::size_t) - 1)
      out[rc] = 0;
    std::string utf8_s = out;

    snprintf(buff, sizeof(buff), "  { 0x%04X,  // U+%04X (%d dec): \"%s\"", realcode, realcode, realcode, utf8_s.c_str());
    fout << buff << std::endl;
    fout << "    {" << std::endl;
    for (int y = 0; y < 20; y++) {
      uint32_t charline = font[i][y];
      std::string s = "0b";
      for (int x = 0; x < 10; x++) {
        if (charline & 0x8000)
          s = s + "1";
        else
          s = s + "0";
        charline <<= 1;
      }
      s += "'000000";
      if (y < 19) s += ',';
      fout << "    " << s << std::endl;
    }
    // } or },
    fout << "    }";
    fout << std::endl;
    fout << "  }";
    if (i < 191)
      fout << ",";
    fout << std::endl;
    /*
    //STARTCHAR :
    {
      0x0000, 0x0000, 0x0000, 0x0000,
        0x0000, 0x0e00, 0x0e00, 0x0000,
        0x0000, 0x0000, 0x0000, 0x0e00,
        0x0e00, 0x0000, 0x0000, 0x0000,
        0x0000, 0x0000, 0x0000, 0x0000,
    },
    */
  }
  fout << "}" << std::endl;
}
#endif // if 0

template<bool fadeBackground>
static void do_DrawStringYUY2(const int width, const int height, BYTE* _dstp, int pitch, const BitmapFont& bmfont, int x, int y, std::vector<int>& s, int color, int halocolor, int align, bool useHalocolor)
{
  fixedFontRec_t current_outlined_char;

  const fixedFontArray& fonts = *bmfont.fonts;
  const int FONT_WIDTH = bmfont.w;
  const int FONT_HEIGHT = bmfont.h;

  // Default string length
  int len = (int)s.size();
  int startindex;
  int xstart;
  int ystart;
  int yend;

  adjustWriteLimits(s, width, height, FONT_WIDTH, FONT_HEIGHT, align,
    // adjusted parameters
    x, y, len, startindex, xstart, ystart, yend);

  if (len <= 0)
    return;

  int val_color = getColorForPlane(PLANAR_Y, color);
  int val_color_outline = getColorForPlane(PLANAR_Y, halocolor);
  int val_color_U = getColorForPlane(PLANAR_U, color);
  int val_color_U_outline = getColorForPlane(PLANAR_U, halocolor);
  int val_color_V = getColorForPlane(PLANAR_V, color);
  int val_color_V_outline = getColorForPlane(PLANAR_V, halocolor);

  BYTE* dstp = _dstp + x * 2 + y * pitch;

  // Start rendering
  for (int ty = ystart; ty < yend; ty++, dstp += pitch) {
    BYTE* dp = dstp;

    int num = s[0];

    unsigned int fontline;
    unsigned int fontoutline;

    fontline = fonts[num].bitmap[ty] << xstart; // shift some pixels if leftmost is chopped

    if (useHalocolor) {
      bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
      fontoutline = current_outlined_char.bitmap[ty] << xstart; // shift some pixels if leftmost is chopped
    }

    int current_xstart = xstart; // leftmost can be chopped

    for (int i = 0; i < len; i++) {
      for (int tx = current_xstart; tx < FONT_WIDTH; tx++) {
        const bool lightIt = fontline & 0x8000;
        LightOnePixelYUY2<fadeBackground>(lightIt, dp, val_color, val_color_U, val_color_V);
        if (useHalocolor) {
          if (!lightIt) // it can be outline
            LightOnePixelYUY2<fadeBackground>(fontoutline & 0x8000, dp, val_color_outline, val_color_U_outline, val_color_V_outline);
        }
        dp += 2;
        fontline <<= 1; // next pixel to the left
        if (useHalocolor)
          fontoutline <<= 1;
      }

      current_xstart = 0;

      if (i + 1 < len)
      {
        num = s[i + 1];
        if (useHalocolor) {
          bmfont.generateOutline(current_outlined_char, num);
          fontoutline = current_outlined_char.bitmap[ty]; // shift some pixels if leftmost is chopped
        }
        fontline = fonts[num].bitmap[ty];
      }
    }
  }
}

template<int bits_per_pixel, int rgbstep, bool fadeBackground>
static void do_DrawStringPackedRGB(const int width, const int height, BYTE* _dstp, int pitch, const BitmapFont& bmfont, int x, int y, std::vector<int>& s, int color, int halocolor, int align, bool useHalocolor)
{
  // define pixel_t as uint8_t, uint16_t or float, based on bits_per_pixel
  typedef typename std::conditional<bits_per_pixel == 8, uint8_t, typename std::conditional < bits_per_pixel <= 16, uint16_t, float > ::type >::type pixel_t;

  auto getHBDColor_RGB = [](int color) {
    if constexpr (bits_per_pixel <= 16) {
      constexpr int max_pixel_value = (1 << bits_per_pixel) - 1;
      return (pixel_t)(color * max_pixel_value / 255); // 0..255 --> 0..1023,4095,16383,65535
    }
    return (pixel_t)(color / 255.0f); // 0..255 -> 0..1.0
  };


  fixedFontRec_t current_outlined_char;

  const fixedFontArray& fonts = *bmfont.fonts;
  const int FONT_WIDTH = bmfont.w;
  const int FONT_HEIGHT = bmfont.h;

  // Default string length
  int len = (int)s.size();
  int startindex;
  int xstart;
  int ystart;
  int yend;

  adjustWriteLimits(s, width, height, FONT_WIDTH, FONT_HEIGHT, align,
    // adjusted parameters
    x, y, len, startindex, xstart, ystart, yend);

  if (len <= 0)
    return;

  int val_color_R = getHBDColor_RGB(getColorForPlane(PLANAR_R, color));
  int val_color_R_outline = getHBDColor_RGB(getColorForPlane(PLANAR_R, halocolor));
  int val_color_G = getHBDColor_RGB(getColorForPlane(PLANAR_G, color));
  int val_color_G_outline = getHBDColor_RGB(getColorForPlane(PLANAR_G, halocolor));
  int val_color_B = getHBDColor_RGB(getColorForPlane(PLANAR_B, color));
  int val_color_B_outline = getHBDColor_RGB(getColorForPlane(PLANAR_B, halocolor));

  // upside down
  BYTE* dstp = _dstp + x * rgbstep + (height - 1 - y) * pitch;;

  // Start rendering
  for (int ty = ystart; ty < yend; ty++, dstp -= pitch) {
    BYTE* dp = dstp;

    int num = s[0];

    unsigned int fontline;
    unsigned int fontoutline;

    fontline = fonts[num].bitmap[ty] << xstart; // shift some pixels if leftmost is chopped

    if (useHalocolor) {
      bmfont.generateOutline(current_outlined_char, num); // on the fly, can be
      fontoutline = current_outlined_char.bitmap[ty] << xstart; // shift some pixels if leftmost is chopped
    }

    int current_xstart = xstart; // leftmost can be chopped

    for (int i = 0; i < len; i++) {
      for (int tx = current_xstart; tx < FONT_WIDTH; tx++) {
        const bool lightIt = fontline & 0x8000;
        LightOnePixelRGB<pixel_t, fadeBackground>(lightIt, dp, val_color_R, val_color_G, val_color_B);
        if (useHalocolor) {
          if (!lightIt) // it can be outline
            LightOnePixelRGB<pixel_t, fadeBackground>(fontoutline & 0x8000, dp, val_color_R_outline, val_color_G_outline, val_color_B_outline);
        }
        dp += rgbstep;
        fontline <<= 1; // next pixel to the left
        if (useHalocolor)
          fontoutline <<= 1;
      }

      current_xstart = 0;

      if (i + 1 < len)
      {
        num = s[i + 1];
        if (useHalocolor) {
          bmfont.generateOutline(current_outlined_char, num);
          fontoutline = current_outlined_char.bitmap[ty]; // shift some pixels if leftmost is chopped
        }
        fontline = fonts[num].bitmap[ty];
      }
    }
  }
}



static void DrawString_internal(const VideoInfo& vi, PVideoFrame& dst, int x, int y, std::u16string &s16, int color, int halocolor, bool useHalocolor, int align, bool fadeBackground)
{
  static BitmapFont_10_20 infoFont1020; // constructor runs once, single instance

  // info one font is supported
  BitmapFont& current_font = infoFont1020;

  // map unicode to character map index
  auto s_remapped = current_font.remap(s16); // array of font table indexes

  //SaveBitmapSource(); // debug to generate source from original table

  const bool isRGB = vi.IsRGB();
  const int planes_y[4] = { PLANAR_Y, PLANAR_U, PLANAR_V, PLANAR_A };
  const int planes_r[4] = { PLANAR_G, PLANAR_B, PLANAR_R, PLANAR_A };
  const int* planes = isRGB ? planes_r : planes_y;

  int logXRatioUV = 0;
  int logYRatioUV = 0;
  if (!vi.IsY() && !vi.IsRGB()) {
    logXRatioUV = vi.IsYUY2() ? 1 : vi.GetPlaneWidthSubsampling(PLANAR_U);
    logYRatioUV = vi.IsYUY2() ? 0 : vi.GetPlaneHeightSubsampling(PLANAR_U);
  }
  int planecount = vi.IsYUY2() ? 1 : std::min(vi.NumComponents(), 3);
  BYTE* dstps[3];
  int pitches[3];
  for (int i = 0; i < planecount; i++)
  {
    int plane = planes[i];
    dstps[i] = dst->GetWritePtr(plane);
    pitches[i] = dst->GetPitch(plane);
  }

  const int width = vi.width;
  const int height = vi.height;

  // fixme: put parameter to a single struct

  const int bits_per_pixel = vi.BitsPerComponent();

  if (vi.IsYUY2()) {
    if (fadeBackground)
      do_DrawStringYUY2<true>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
    else
      do_DrawStringYUY2<false>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
    return;
  }

  // Packed RGB24/32/48/64
  if (isRGB && !vi.IsPlanar()) {
    if (fadeBackground) {
      if (vi.IsRGB24())
        do_DrawStringPackedRGB<8, 3, true>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB32())
        do_DrawStringPackedRGB<8, 4, true>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB48())
        do_DrawStringPackedRGB<16, 6, true>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB64())
        do_DrawStringPackedRGB<16, 8, true>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
    }
    else {
      if (vi.IsRGB24())
        do_DrawStringPackedRGB<8, 3, false>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB32())
        do_DrawStringPackedRGB<8, 4, false>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB48())
        do_DrawStringPackedRGB<16, 6, false>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
      else if (vi.IsRGB64())
        do_DrawStringPackedRGB<16, 8, false>(width, height, dstps[0], pitches[0], current_font, x, y, s_remapped, color, halocolor, align, useHalocolor);
    }
    return;
  }

  // planar and Y
  if (fadeBackground) {
    if (isRGB) {
      switch (bits_per_pixel)
      {
        // FIXME: we have outline inside there, pass halocolor and an option: bool outline
      case 8: do_DrawStringPlanar<8, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 10: do_DrawStringPlanar<10, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 12: do_DrawStringPlanar<12, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 14: do_DrawStringPlanar<14, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 16: do_DrawStringPlanar<16, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 32: do_DrawStringPlanar<32, true, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      }
    }
    else {
      switch (bits_per_pixel)
      {
      case 8: do_DrawStringPlanar<8, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 10: do_DrawStringPlanar<10, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 12: do_DrawStringPlanar<12, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 14: do_DrawStringPlanar<14, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 16: do_DrawStringPlanar<16, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 32: do_DrawStringPlanar<32, true, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      }
    }
  }
  else {
    if (isRGB) {
      switch (bits_per_pixel)
      {
      case 8: do_DrawStringPlanar<8, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 10: do_DrawStringPlanar<10, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 12: do_DrawStringPlanar<12, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 14: do_DrawStringPlanar<14, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 16: do_DrawStringPlanar<16, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 32: do_DrawStringPlanar<32, false, true>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      }
    }
    else {
      switch (bits_per_pixel)
      {
      case 8: do_DrawStringPlanar<8, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 10: do_DrawStringPlanar<10, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 12: do_DrawStringPlanar<12, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 14: do_DrawStringPlanar<14, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 16: do_DrawStringPlanar<16, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      case 32: do_DrawStringPlanar<32, false, false>(width, height, dstps, pitches, logXRatioUV, logYRatioUV, planecount, current_font, x, y, s_remapped, color, halocolor, align, useHalocolor); break;
      }
    }
  }
}

void SimpleTextOutW(const VideoInfo& vi, PVideoFrame& frame, int real_x, int real_y, std::u16string& text, bool fadeBackground, int textcolor, int halocolor, bool useHaloColor, int align)
{
  DrawString_internal(vi, frame, real_x, real_y, text, textcolor, halocolor, useHaloColor, align, fadeBackground); // fully transparent background
}

// additional parameter: lsp line spacing
void SimpleTextOutW_multi(const VideoInfo& vi, PVideoFrame& frame, int real_x, int real_y, std::u16string& text, bool fadeBackground, int textcolor, int halocolor, bool useHaloColor, int align, int lsp)
{
  // make list governed by LF separator
  using u16stringstream = std::basic_stringstream<char16_t>;
  std::u16string temp;
  std::vector<std::u16string> parts;
  u16stringstream wss(text);
  while (std::getline(wss, temp, u'\n'))
    parts.push_back(temp);

  constexpr int fontSize = 20; // we have only one font FIXME: made it generic

  // when multiline, bottom and vertically centered cases affect starting y
  int al = alignToBitmask(align);
  if (al & ATA_BOTTOM)
    real_y -= fontSize * (parts.size() - 1);
  else if (al & ATA_BASELINE)
    real_y -= fontSize * (parts.size() / 2);

  for (auto s : parts) {
    SimpleTextOutW(vi, frame, real_x, real_y, s, fadeBackground, textcolor, halocolor, useHaloColor, align);
    real_y += fontSize + lsp;
  }
}

// Old legacy info.h functions, but with utf8 mode
// w/o outline, originally with ASCII input, background fading
// unline name Planar, it works for all format
void DrawStringPlanar(VideoInfo& vi, PVideoFrame& dst, int x, int y, const char* s)
{
  int color;
  if (vi.IsRGB())
    color = (250 << 16) + (250 << 8) + (250);
  else
    color = (230 << 16) + (128 << 8) + (128);
  int len = 0; // use strlen
  // fadeBackground = true: background letter area is faded instead not being untouched.

  std::u16string s16 = charToU16string(s, false);

  int halocolor = 0;

  DrawString_internal(vi, dst, x, y, s16,
    color,
    halocolor,
    false, // don't use halocolor
    0 /* no align */,
    true // fadeBackGround
  );
}

void DrawStringYUY2(VideoInfo& vi, PVideoFrame& dst, int x, int y, const char* s)
{
  DrawStringPlanar(vi, dst, x, y, s); // same
}

// legacy function w/o outline, originally with ASCII input, background fading
void DrawStringRGB24(VideoInfo &vi, PVideoFrame& dst, int x, int y, const char* s)
{
  DrawStringPlanar(vi, dst, x, y, s); // same
}

// legacy function w/o outline, originally with ASCII input, background fading
void DrawStringRGB32(VideoInfo& vi, PVideoFrame& dst, int x, int y, const char* s)
{
  DrawStringPlanar(vi, dst, x, y, s); // same
}
